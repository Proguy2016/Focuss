import React, { useState, useRef, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { 
  ZoomIn, ZoomOut, ChevronLeft, ChevronRight, 
  Download, Share, Bookmark, Search,
  Highlighter, Pen, StickyNote, Eraser, Hand,
  Maximize, Minimize, RotateCw, PanelLeft, 
  Settings, MoreVertical, File, BookOpen
} from 'lucide-react';
import { Button } from '../components/common/Button';
import { Card } from '../components/common/Card';
import { Document, Page, pdfjs } from 'react-pdf';
import 'react-pdf/dist/esm/Page/TextLayer.css';
import 'react-pdf/dist/esm/Page/AnnotationLayer.css';

// Configure the worker source from the public directory (using the correct file extension)
pdfjs.GlobalWorkerOptions.workerSrc = '/pdf.worker.min.mjs';

// Import a reliable sample PDF
import samplePdf from '../assets/sample.pdf';

// Simplify the sample PDF URL to use a more reliable source
const samplePdfUrl = 'https://arxiv.org/pdf/quant-ph/0410100.pdf';

// Local proxy PDF URL for reliable loading
const localProxyUrl = `/api/proxy-pdf?url=${encodeURIComponent(samplePdfUrl)}`;

// Demo PDF with content
const demoPdfContent = `
%PDF-1.1
1 0 obj
<< /Type /Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<< /Type /Pages
/Kids [3 0 R]
/Count 1
/MediaBox [0 0 300 144]
>>
endobj
3 0 obj
<< /Type /Page
/Parent 2 0 R
/Resources << /Font << /F1 4 0 R >>
>>
/Contents 5 0 R
>>
endobj
4 0 obj
<< /Type /Font
/Subtype /Type1
/Name /F1
/BaseFont /Helvetica
>>
endobj
5 0 obj
<< /Length 73 >>
stream
BT
/F1 24 Tf
100 100 Td
(Focus Ritual PDF Viewer) Tj
ET
endstream
endobj
xref
0 6
0000000000 65535 f
0000000009 00000 n
0000000058 00000 n
0000000135 00000 n
0000000217 00000 n
0000000284 00000 n
trailer
<< /Size 6
/Root 1 0 R
>>
startxref
357
%%EOF
`;

// Create a blob URL from the simple PDF content as a final fallback
const createFallbackPdf = () => {
  // Very simple valid PDF content
  const pdfContent = `
%PDF-1.4
1 0 obj
<< /Type /Catalog /Pages 2 0 R >>
endobj
2 0 obj
<< /Type /Pages /Kids [3 0 R] /Count 1 >>
endobj
3 0 obj
<< /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] /Contents 4 0 R /Resources << /Font << /F1 5 0 R >> >> >>
endobj
4 0 obj
<< /Length 68 >>
stream
BT
/F1 24 Tf
100 700 Td
(Focus Ritual PDF Viewer - Sample PDF) Tj
ET
endstream
endobj
5 0 obj
<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>
endobj
xref
0 6
0000000000 65535 f
0000000009 00000 n
0000000058 00000 n
0000000115 00000 n
0000000234 00000 n
0000000352 00000 n
trailer
<< /Size 6 /Root 1 0 R >>
startxref
420
%%EOF
  `.trim();
  
  const blob = new Blob([pdfContent], { type: 'application/pdf' });
  return URL.createObjectURL(blob);
};

interface Highlight {
  id: string;
  page: number;
  position: { 
    boundingRect: {
      x1: number;
      y1: number;
      x2: number;
      y2: number;
      width: number;
      height: number;
    };
    rects: Array<{
      x1: number;
      y1: number;
      x2: number;
      y2: number;
      width: number;
      height: number;
    }>;
  };
  content: {
    text: string;
  };
  comment?: string;
  color: string;
  timestamp: number;
}

interface Annotation {
  id: string;
  type: 'highlight' | 'drawing' | 'note';
  page: number;
  content: string;
  position: { x: number; y: number };
  color: string;
  timestamp: number;
}

interface DrawingPoint {
  x: number;
  y: number;
}

interface DrawingPath {
  id: string;
  points: DrawingPoint[];
  color: string;
  width: number;
  page: number;
  timestamp: number;
}

const PDFViewer: React.FC = () => {
  const [pdfFile, setPdfFile] = useState<string | ArrayBuffer | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [loadError, setLoadError] = useState<Error | null>(null);
  const [numPages, setNumPages] = useState<number | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [zoom, setZoom] = useState(1.0);
  const [scale, setScale] = useState(1.0);
  const [rotation, setRotation] = useState(0);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [activeTab, setActiveTab] = useState<'thumbnails' | 'annotations' | 'bookmarks'>('thumbnails');
  const [activeTool, setActiveTool] = useState<'select' | 'highlight' | 'pen' | 'note' | 'eraser' | 'hand'>('select');
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [highlights, setHighlights] = useState<Highlight[]>([]);
  const [annotations, setAnnotations] = useState<Annotation[]>([]);
  const [selectedText, setSelectedText] = useState('');
  const [showTextSelector, setShowTextSelector] = useState(false);
  const [textPosition, setTextPosition] = useState({ x: 0, y: 0 });
  const [searchQuery, setSearchQuery] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [drawings, setDrawings] = useState<DrawingPath[]>([]);
  const [currentDrawing, setCurrentDrawing] = useState<DrawingPath | null>(null);
  const [isDrawing, setIsDrawing] = useState(false);
  const [penColor, setPenColor] = useState('#ff5722');
  const [penWidth, setPenWidth] = useState(3);
  const [notes, setNotes] = useState<Annotation[]>([]);
  const [activeNote, setActiveNote] = useState<string | null>(null);
  const [showNoteEditor, setShowNoteEditor] = useState(false);
  const [notePosition, setNotePosition] = useState({ x: 0, y: 0 });
  const [noteText, setNoteText] = useState('');
  const [noteColor, setNoteColor] = useState('#4caf50');
  const noteEditorRef = useRef<HTMLDivElement>(null);
  
  const pdfContainerRef = useRef<HTMLDivElement>(null);
  const textSelectorRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // Add eraser cursor state
  const [eraserPosition, setEraserPosition] = useState({ x: 0, y: 0 });
  const [showEraserCursor, setShowEraserCursor] = useState(false);

  useEffect(() => {
    const handleMouseUp = () => {
      const selection = window.getSelection();
      if (selection && selection.toString().trim() && activeTool === 'highlight') {
        setSelectedText(selection.toString());
        
        if (selection.rangeCount > 0) {
          const range = selection.getRangeAt(0);
          const rect = range.getBoundingClientRect();
          
          // Only show the selector if we have some text and we're in highlight mode
          if (rect && activeTool === 'highlight') {
            const container = pdfContainerRef.current?.getBoundingClientRect();
            if (container) {
              setTextPosition({
                x: rect.left - container.left + rect.width / 2,
                y: rect.top - container.top
              });
              setShowTextSelector(true);
            }
          }
        }
      } else {
        setShowTextSelector(false);
      }
    };

    document.addEventListener('mouseup', handleMouseUp);
    return () => {
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [activeTool]);

  // Hide text selector when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (textSelectorRef.current && !textSelectorRef.current.contains(event.target as Node)) {
        setShowTextSelector(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Load PDF with fallbacks
  useEffect(() => {
    setIsLoading(true);
    setLoadError(null);
    
    // Start by directly using our fallback-generated PDF to avoid CORS issues
    const fallbackPdfUrl = createFallbackPdf();
    setPdfFile(fallbackPdfUrl);
    setIsLoading(false);
    
    return () => {
      // If we created a blob URL, revoke it to avoid memory leaks
      if (typeof pdfFile === 'string' && pdfFile.startsWith('blob:')) {
        URL.revokeObjectURL(pdfFile);
      }
    };
  }, []);

  const handleDocumentLoadSuccess = ({ numPages }: { numPages: number }) => {
    setNumPages(numPages);
  };

  const handleNextPage = () => {
    if (currentPage < (numPages || 1)) {
      setCurrentPage(currentPage + 1);
    }
  };

  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  const handleZoomIn = () => {
    setZoom(Math.min(zoom + 0.2, 3));
    setScale(Math.min(scale + 0.2, 3));
  };

  const handleZoomOut = () => {
    setZoom(Math.max(zoom - 0.2, 0.5));
    setScale(Math.max(scale - 0.2, 0.5));
  };

  const handleRotate = () => {
    setRotation((rotation + 90) % 360);
  };

  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen);
    if (!isFullscreen) {
      document.documentElement.requestFullscreen().catch(err => {
        console.error('Error attempting to enable full-screen mode:', err);
      });
    } else {
      if (document.fullscreenElement) {
        document.exitFullscreen().catch(err => {
          console.error('Error attempting to exit full-screen mode:', err);
        });
      }
    }
  };

  const handleToolClick = (tool: 'select' | 'highlight' | 'pen' | 'note' | 'eraser' | 'hand') => {
    setActiveTool(tool);
    setShowTextSelector(false);
  };

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setIsLoading(true);
      setLoadError(null);
      
      // Clean up previous blob URL if needed
      if (typeof pdfFile === 'string' && pdfFile.startsWith('blob:')) {
        URL.revokeObjectURL(pdfFile);
      }
      
      // Use FileReader to load the PDF
      const fileReader = new FileReader();
      fileReader.onload = () => {
        setPdfFile(fileReader.result);
        setCurrentPage(1);
        setIsLoading(false);
      };
      fileReader.onerror = (error) => {
        console.error('Error reading file:', error);
        setLoadError(new Error('Failed to read the selected file'));
        const fallbackPdfUrl = createFallbackPdf();
        setPdfFile(fallbackPdfUrl);
        setIsLoading(false);
      };
      fileReader.readAsDataURL(file);
    }
  };

  const triggerFileUpload = () => {
    fileInputRef.current?.click();
  };

  const addHighlight = (color = '#ffeb3b') => {
    if (!selectedText) return;
    
    const selection = window.getSelection();
    if (!selection || selection.rangeCount === 0) return;
    
    const range = selection.getRangeAt(0);
    const rects = Array.from(range.getClientRects());
    
    if (rects.length === 0) return;
    
    // Get the bounding client rect of the first and last rects
    const firstRect = rects[0];
    const lastRect = rects[rects.length - 1];
    
    // Create a bounding rectangle that encompasses all text rects
    const boundingRect = {
      x1: firstRect.left,
      y1: firstRect.top,
      x2: lastRect.right,
      y2: lastRect.bottom,
      width: lastRect.right - firstRect.left,
      height: lastRect.bottom - firstRect.top,
    };
    
    // Map the client rects to our internal format
    const rectsList = rects.map(rect => ({
      x1: rect.left,
      y1: rect.top,
      x2: rect.right,
      y2: rect.bottom,
      width: rect.width,
      height: rect.height,
    }));
    
    const highlight: Highlight = {
      id: `highlight_${Date.now()}`,
      page: currentPage,
      position: {
        boundingRect,
        rects: rectsList,
      },
      content: {
        text: selectedText
      },
      color,
      timestamp: Date.now()
    };
    
    setHighlights([...highlights, highlight]);
    setShowTextSelector(false);
    window.getSelection()?.removeAllRanges();
    setSelectedText('');
  };

  // Mock function to add a drawing annotation
  const addAnnotation = (type: 'drawing' | 'note') => {
    const newAnnotation: Annotation = {
      id: Date.now().toString(),
      type,
      page: currentPage,
      content: type === 'note' ? 'New note' : '',
      position: { 
        x: Math.random() * 400 + 100, 
        y: Math.random() * 400 + 100 
      },
      color: type === 'drawing' ? '#ff5722' : '#4caf50',
      timestamp: Date.now()
    };
    
    setAnnotations([...annotations, newAnnotation]);
  };

  // Format the date from timestamp
  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Thumbnail rendering for the sidebar
  const renderThumbnail = (pageNumber: number) => {
    return (
      <div 
        key={`thumb_${pageNumber}`}
        className={`relative cursor-pointer transition-all duration-200 ${currentPage === pageNumber ? 'ring-2 ring-purple-400' : 'hover:ring-1 hover:ring-white/30'} rounded-md overflow-hidden`}
        onClick={() => setCurrentPage(pageNumber)}
      >
        <Document file={pdfFile || ''} onLoadSuccess={handleDocumentLoadSuccess}>
          <Page 
            pageNumber={pageNumber} 
            width={100}
            renderTextLayer={false}
            renderAnnotationLayer={false}
          />
        </Document>
        <div className="absolute bottom-0 left-0 right-0 bg-black/60 py-1 text-center text-xs text-white">
          {pageNumber}
        </div>
      </div>
    );
  };

  const startDrawing = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {
    if (activeTool !== 'pen') return;
    
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    const newDrawing: DrawingPath = {
      id: `drawing_${Date.now()}`,
      points: [{ x, y }],
      color: penColor,
      width: penWidth,
      page: currentPage,
      timestamp: Date.now()
    };
    
    setCurrentDrawing(newDrawing);
    setIsDrawing(true);
    
    // Start drawing on canvas
    const ctx = canvas.getContext('2d');
    if (ctx) {
      ctx.beginPath();
      ctx.moveTo(x, y);
      ctx.lineCap = 'round';
      ctx.lineJoin = 'round';
      ctx.strokeStyle = penColor;
      ctx.lineWidth = penWidth;
    }
  }, [activeTool, currentPage, penColor, penWidth]);

  const draw = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {
    if (!isDrawing || !currentDrawing) return;
    
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    // Add point to current drawing
    const updatedDrawing = {
      ...currentDrawing,
      points: [...currentDrawing.points, { x, y }]
    };
    setCurrentDrawing(updatedDrawing);
    
    // Draw on canvas
    const ctx = canvas.getContext('2d');
    if (ctx) {
      ctx.lineTo(x, y);
      ctx.stroke();
    }
  }, [isDrawing, currentDrawing]);

  const stopDrawing = useCallback(() => {
    if (isDrawing && currentDrawing) {
      setDrawings([...drawings, currentDrawing]);
      setCurrentDrawing(null);
      setIsDrawing(false);
    }
  }, [isDrawing, currentDrawing, drawings]);

  useEffect(() => {
    if (activeTool === 'pen' && canvasRef.current) {
      const canvas = canvasRef.current;
      const ctx = canvas.getContext('2d');
      if (ctx) {
        // Clear canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Set canvas dimensions to match the PDF container
        if (pdfContainerRef.current) {
          const container = pdfContainerRef.current;
          canvas.width = container.clientWidth;
          canvas.height = container.clientHeight;
        }
        
        // Draw existing drawings for the current page
        drawings
          .filter(drawing => drawing.page === currentPage)
          .forEach(drawing => {
            if (drawing.points.length < 2) return;
            
            ctx.beginPath();
            ctx.moveTo(drawing.points[0].x, drawing.points[0].y);
            ctx.lineCap = 'round';
            ctx.lineJoin = 'round';
            ctx.strokeStyle = drawing.color;
            ctx.lineWidth = drawing.width;
            
            for (let i = 1; i < drawing.points.length; i++) {
              ctx.lineTo(drawing.points[i].x, drawing.points[i].y);
            }
            
            ctx.stroke();
          });
      }
    }
  }, [activeTool, currentPage, drawings]);

  const handleNoteClick = (e: React.MouseEvent) => {
    if (activeTool !== 'note') return;
    
    // Get position relative to the PDF container
    const container = pdfContainerRef.current;
    if (!container) return;
    
    const rect = container.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    // Set up the note editor
    setNotePosition({ x, y });
    setNoteText('');
    setShowNoteEditor(true);
  };

  const saveNote = () => {
    if (!noteText.trim()) {
      setShowNoteEditor(false);
      return;
    }
    
    const newNote: Annotation = {
      id: `note_${Date.now()}`,
      type: 'note',
      page: currentPage,
      content: noteText,
      position: notePosition,
      color: noteColor,
      timestamp: Date.now()
    };
    
    setNotes([...notes, newNote]);
    setShowNoteEditor(false);
    setNoteText('');
  };

  const editNote = (id: string) => {
    const note = notes.find(n => n.id === id);
    if (!note) return;
    
    setActiveNote(id);
    setNotePosition(note.position);
    setNoteText(note.content);
    setNoteColor(note.color);
    setShowNoteEditor(true);
  };

  const updateNote = () => {
    if (!activeNote) return;
    
    const updatedNotes = notes.map(note => 
      note.id === activeNote 
        ? { ...note, content: noteText, color: noteColor } 
        : note
    );
    
    setNotes(updatedNotes);
    setShowNoteEditor(false);
    setActiveNote(null);
    setNoteText('');
  };

  const deleteNote = (id: string) => {
    setNotes(notes.filter(note => note.id !== id));
    if (activeNote === id) {
      setShowNoteEditor(false);
      setActiveNote(null);
    }
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (noteEditorRef.current && !noteEditorRef.current.contains(event.target as Node)) {
        if (showNoteEditor) {
          if (activeNote) {
            updateNote();
          } else if (noteText.trim()) {
            saveNote();
          } else {
            setShowNoteEditor(false);
          }
        }
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showNoteEditor, noteText, activeNote]);

  // Add this function to handle erasing drawings - after stopDrawing
  const handleErase = (e: React.MouseEvent) => {
    if (activeTool !== 'eraser') return;
    
    const container = pdfContainerRef.current;
    if (!container) return;
    
    const rect = container.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    // Define eraser radius
    const eraserRadius = 10;
    
    // Find drawings that are within the eraser radius
    const updatedDrawings = drawings.filter(drawing => {
      if (drawing.page !== currentPage) return true;
      
      // Check if any point in the drawing is within the eraser radius
      const pointInEraser = drawing.points.some(point => {
        const distance = Math.sqrt(
          Math.pow(point.x - x, 2) + Math.pow(point.y - y, 2)
        );
        return distance < eraserRadius;
      });
      
      // Keep the drawing if no points are within the eraser radius
      return !pointInEraser;
    });
    
    // Update drawings if any were erased
    if (updatedDrawings.length !== drawings.length) {
      setDrawings(updatedDrawings);
    }
  };

  // Add effect to track mouse position for eraser
  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (activeTool === 'eraser' && pdfContainerRef.current) {
        const rect = pdfContainerRef.current.getBoundingClientRect();
        setEraserPosition({
          x: e.clientX - rect.left,
          y: e.clientY - rect.top
        });
        setShowEraserCursor(true);
      } else {
        setShowEraserCursor(false);
      }
    };
    
    const handleMouseLeave = () => {
      setShowEraserCursor(false);
    };
    
    if (pdfContainerRef.current) {
      pdfContainerRef.current.addEventListener('mousemove', handleMouseMove);
      pdfContainerRef.current.addEventListener('mouseleave', handleMouseLeave);
    }
    
    return () => {
      if (pdfContainerRef.current) {
        pdfContainerRef.current.removeEventListener('mousemove', handleMouseMove);
        pdfContainerRef.current.removeEventListener('mouseleave', handleMouseLeave);
      }
    };
  }, [activeTool]);

  // Add save function after eraser handlers
  const handleSave = () => {
    // Create an object with all annotations
    const annotationsData = {
      highlights,
      notes,
      drawings,
      timestamp: new Date().toISOString(),
      documentInfo: {
        numPages,
        title: 'Document Annotations'
      }
    };
    
    // Convert to JSON
    const jsonString = JSON.stringify(annotationsData, null, 2);
    
    // Create a blob and download link
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    // Create download link and trigger it
    const a = document.createElement('a');
    a.href = url;
    a.download = `annotations_${new Date().toISOString().slice(0, 10)}.json`;
    document.body.appendChild(a);
    a.click();
    
    // Clean up
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className={`h-full flex flex-col ${isFullscreen ? 'fixed inset-0 z-50 bg-black' : ''}`}>
      {/* Hidden file input with proper accept attribute */}
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        accept="application/pdf"
        className="hidden"
      />
      
      {/* Top toolbar */}
      <div className="flex items-center justify-between p-3 border-b border-white/10 bg-black/20 backdrop-blur-sm">
        <div className="flex items-center space-x-2">
          <Button 
            variant="glass" 
            size="sm" 
            onClick={toggleSidebar}
            icon={PanelLeft}
            className={sidebarOpen ? 'text-purple-300' : ''}
          />
          <Button 
            variant="glass" 
            size="sm" 
            onClick={triggerFileUpload}
            icon={File}
          >
            Open PDF
          </Button>
        </div>
        
        {/* Main tools group */}
        <div className="flex items-center bg-black/20 rounded-md p-1">
          <div className="flex border-r border-white/10 pr-2 mr-2">
            <Button 
              variant={activeTool === 'select' ? 'glass' : 'outline'} 
              size="sm"
              className={activeTool === 'select' ? 'bg-white/10 text-purple-300' : ''}
              onClick={() => setActiveTool('select')}
              icon={Hand}
              title="Select Tool"
            />
          </div>
          
          <div className="flex space-x-1 border-r border-white/10 pr-2 mr-2">
            <Button 
              variant={activeTool === 'highlight' ? 'glass' : 'outline'}
              size="sm"
              className={activeTool === 'highlight' ? 'bg-white/10 text-yellow-300' : ''}
              onClick={() => setActiveTool('highlight')}
              icon={Highlighter}
              title="Highlight Text"
            />
            <Button 
              variant={activeTool === 'note' ? 'glass' : 'outline'}
              size="sm"
              className={activeTool === 'note' ? 'bg-white/10 text-green-300' : ''}
              onClick={() => setActiveTool('note')}
              icon={StickyNote}
              title="Add Note"
            />
            <Button 
              variant={activeTool === 'pen' ? 'glass' : 'outline'}
              size="sm"
              className={activeTool === 'pen' ? 'bg-white/10 text-orange-300' : ''}
              onClick={() => setActiveTool('pen')}
              icon={Pen}
              title="Draw"
            />
          </div>
          
          <div className="flex">
            <Button 
              variant={activeTool === 'eraser' ? 'glass' : 'outline'}
              size="sm"
              className={activeTool === 'eraser' ? 'bg-white/10 text-red-300' : ''}
              onClick={() => setActiveTool('eraser')}
              icon={Eraser}
              title="Erase"
            />
          </div>
        </div>
        
        {/* Drawing tools - show when pen tool is active */}
        {activeTool === 'pen' && (
          <div className="flex items-center space-x-1 ml-2 p-1 bg-white/10 rounded-md">
            <div className="text-xs text-white/70 mr-1">Color:</div>
            <button 
              className="w-5 h-5 rounded-full bg-red-500 hover:ring-2 ring-white"
              onClick={() => setPenColor('#f44336')}
              style={{ border: penColor === '#f44336' ? '2px solid white' : 'none' }}
            />
            <button 
              className="w-5 h-5 rounded-full bg-blue-500 hover:ring-2 ring-white"
              onClick={() => setPenColor('#2196f3')}
              style={{ border: penColor === '#2196f3' ? '2px solid white' : 'none' }}
            />
            <button 
              className="w-5 h-5 rounded-full bg-green-500 hover:ring-2 ring-white"
              onClick={() => setPenColor('#4caf50')}
              style={{ border: penColor === '#4caf50' ? '2px solid white' : 'none' }}
            />
            <button 
              className="w-5 h-5 rounded-full bg-yellow-500 hover:ring-2 ring-white"
              onClick={() => setPenColor('#ffeb3b')}
              style={{ border: penColor === '#ffeb3b' ? '2px solid white' : 'none' }}
            />
            <button 
              className="w-5 h-5 rounded-full bg-purple-500 hover:ring-2 ring-white"
              onClick={() => setPenColor('#9c27b0')}
              style={{ border: penColor === '#9c27b0' ? '2px solid white' : 'none' }}
            />
            <div className="border-r border-white/20 h-4 mx-1" />
            <div className="text-xs text-white/70 mr-1">Size:</div>
            <button 
              className="w-5 h-5 rounded-full bg-white/20 hover:bg-white/30 flex items-center justify-center"
              onClick={() => setPenWidth(1)}
            >
              <div className={`rounded-full bg-white ${penWidth === 1 ? 'w-1 h-1' : 'w-1 h-1'}`}></div>
            </button>
            <button 
              className="w-5 h-5 rounded-full bg-white/20 hover:bg-white/30 flex items-center justify-center"
              onClick={() => setPenWidth(3)}
            >
              <div className={`rounded-full bg-white ${penWidth === 3 ? 'w-3 h-3' : 'w-2 h-2'}`}></div>
            </button>
            <button 
              className="w-5 h-5 rounded-full bg-white/20 hover:bg-white/30 flex items-center justify-center"
              onClick={() => setPenWidth(5)}
            >
              <div className={`rounded-full bg-white ${penWidth === 5 ? 'w-5 h-5' : 'w-3 h-3'}`}></div>
            </button>
          </div>
        )}
      </div>
      
      {/* Bottom navigation bar */}
      <div className="flex items-center justify-between p-3 border-t border-white/10 bg-black/30 backdrop-blur-sm">
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-1">
            <Button 
              variant="glass" 
              size="sm" 
              onClick={handlePrevPage}
              disabled={currentPage <= 1}
              icon={ChevronLeft}
            />
            <div className="min-w-[80px] text-center text-white">
              <span className="text-sm">{currentPage} / {numPages || '?'}</span>
            </div>
            <Button 
              variant="glass" 
              size="sm" 
              onClick={handleNextPage}
              disabled={!numPages || currentPage >= numPages}
              icon={ChevronRight}
            />
          </div>
        </div>
        
        <div className="flex items-center space-x-1">
          <Button variant="glass" size="sm" onClick={handleZoomOut} icon={ZoomOut} />
          <div className="min-w-[60px] text-center">
            <span className="text-sm text-white">{Math.round(scale * 100)}%</span>
          </div>
          <Button variant="glass" size="sm" onClick={handleZoomIn} icon={ZoomIn} />
          <Button variant="glass" size="sm" onClick={handleRotate} icon={RotateCw} />
          <div className="border-l border-white/10 mx-2 h-6"></div>
          <Button 
            variant="glass" 
            size="sm" 
            onClick={handleSave}
            icon={Download}
            title="Save Annotations"
          >
            Save
          </Button>
        </div>
      </div>
      
      <div className="flex-1 flex overflow-hidden">
        {/* Sidebar */}
        {sidebarOpen && (
          <div className="w-64 border-r border-white/10 flex flex-col bg-black/20 backdrop-blur-sm">
            {/* Sidebar tabs */}
            <div className="flex border-b border-white/10">
              <button 
                className={`flex-1 py-2 text-sm font-medium ${activeTab === 'thumbnails' ? 'text-purple-300 border-b-2 border-purple-400' : 'text-white/60 hover:text-white'}`}
                onClick={() => setActiveTab('thumbnails')}
              >
                <div className="flex justify-center items-center space-x-1">
                  <BookOpen className="w-4 h-4" />
                  <span>Pages</span>
                </div>
              </button>
              <button 
                className={`flex-1 py-2 text-sm font-medium ${activeTab === 'annotations' ? 'text-purple-300 border-b-2 border-purple-400' : 'text-white/60 hover:text-white'}`}
                onClick={() => setActiveTab('annotations')}
              >
                <div className="flex justify-center items-center space-x-1">
                  <Highlighter className="w-4 h-4" />
                  <span>Notes</span>
                </div>
              </button>
              <button 
                className={`flex-1 py-2 text-sm font-medium ${activeTab === 'bookmarks' ? 'text-purple-300 border-b-2 border-purple-400' : 'text-white/60 hover:text-white'}`}
                onClick={() => setActiveTab('bookmarks')}
              >
                <div className="flex justify-center items-center space-x-1">
                  <Bookmark className="w-4 h-4" />
                  <span>Bookmarks</span>
                </div>
              </button>
            </div>
            
            {/* Sidebar content based on active tab */}
            <div className="flex-1 overflow-y-auto p-2 scrollbar-thin scrollbar-thumb-white/10">
              {activeTab === 'thumbnails' && numPages && (
                <div className="grid grid-cols-2 gap-2">
                  {Array.from(new Array(numPages), (_, index) => (
                    renderThumbnail(index + 1)
                  ))}
                </div>
              )}
              
              {activeTab === 'annotations' && (
                <div className="space-y-2">
                  {[...highlights, ...notes, ...drawings].length > 0 ? (
                    [...highlights, ...notes, ...drawings]
                      .sort((a, b) => b.timestamp - a.timestamp)
                      .map((item) => {
                        // Add proper type guards
                        const isHighlight = 'content' in item && 'position' in item && 'boundingRect' in item.position;
                        const isNote = 'type' in item && item.type === 'note';
                        const isDrawing = 'points' in item;
                        
                        let displayContent = '';
                        let icon = <Highlighter className="w-3 h-3 text-yellow-400" />;
                        let iconColor = 'text-yellow-400';
                        
                        if (isHighlight) {
                          const highlight = item as Highlight;
                          displayContent = highlight.content.text.substring(0, 50) + (highlight.content.text.length > 50 ? '...' : '');
                          icon = <Highlighter className="w-3 h-3 text-yellow-400" />;
                        } else if (isNote) {
                          const note = item as Annotation;
                          displayContent = note.content.substring(0, 50) + (note.content.length > 50 ? '...' : '');
                          icon = <StickyNote className="w-3 h-3 text-green-400" />;
                          iconColor = 'text-green-400';
                        } else if (isDrawing) {
                          displayContent = 'Drawing';
                          icon = <Pen className="w-3 h-3 text-orange-400" />;
                          iconColor = 'text-orange-400';
                        }
                        
                        const page = 'page' in item ? item.page : 1;
                        const timestamp = item.timestamp;
                        const id = item.id;
                        
                        return (
                          <div 
                            key={id}
                            className="p-2 rounded-md bg-white/5 hover:bg-white/10 cursor-pointer"
                            onClick={() => {
                              setCurrentPage(page);
                              if (isNote) {
                                const note = item as Annotation;
                                // Focus on the note after page change
                                setTimeout(() => {
                                  const noteEl = document.getElementById(id);
                                  if (noteEl) {
                                    noteEl.scrollIntoView({ behavior: 'smooth', block: 'center' });
                                    noteEl.classList.add('ring-2', 'ring-purple-400');
                                    setTimeout(() => {
                                      noteEl.classList.remove('ring-2', 'ring-purple-400');
                                    }, 2000);
                                  }
                                }, 300);
                              }
                            }}
                          >
                            <div className="flex items-start space-x-2">
                              <div className={`mt-1 p-1 rounded-full bg-white/10 ${iconColor}`}>
                                {icon}
                              </div>
                              <div className="flex-1 min-w-0">
                                <div className="text-xs text-white/50">
                                  Page {page} • {new Date(timestamp).toLocaleDateString('en-US', {
                                    month: 'short',
                                    day: 'numeric',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                  })}
                                </div>
                                <div className="text-sm text-white truncate">
                                  {displayContent}
                                </div>
                              </div>
                              {isNote && (
                                <button
                                  className="text-white/50 hover:text-white"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    editNote(id);
                                  }}
                                >
                                  <Settings className="w-3 h-3" />
                                </button>
                              )}
                            </div>
                          </div>
                        );
                      })
                  ) : (
                    <div className="text-center py-10 text-white/40">
                      <Highlighter className="inline-block w-6 h-6 mb-2 opacity-50" />
                      <p>No annotations yet</p>
                      <p className="text-xs mt-1">Use the annotation tools to add notes and highlights</p>
                    </div>
                  )}
                </div>
              )}
              
              {activeTab === 'bookmarks' && (
                <div className="text-center py-10 text-white/40">
                  <Bookmark className="inline-block w-6 h-6 mb-2 opacity-50" />
                  <p>No bookmarks</p>
                  <p className="text-xs mt-1">Bookmark important pages for quick access</p>
                </div>
              )}
            </div>
          </div>
        )}
        
        {/* Main content area */}
        <div className="flex-1 flex flex-col overflow-hidden bg-gradient-to-br from-slate-900/80 via-purple-900/40 to-slate-900/80">
          {/* PDF viewer container */}
          <div 
            className="flex-1 overflow-auto flex items-center justify-center p-4 relative" 
            ref={pdfContainerRef}
            onClick={(e) => {
              if (activeTool === 'note') {
                handleNoteClick(e);
              } else if (activeTool === 'eraser') {
                handleErase(e);
              }
            }}
            onMouseMove={(e) => {
              if (activeTool === 'eraser') {
                handleErase(e);
              }
            }}
          >
            {pdfFile ? (
              <div className="relative">
                <Document
                  file={pdfFile}
                  onLoadSuccess={handleDocumentLoadSuccess}
                  onLoadError={(error) => {
                    console.error('Error loading document:', error);
                    // If loading fails, use our simple fallback PDF
                    const fallbackPdfUrl = createFallbackPdf();
                    setPdfFile(fallbackPdfUrl);
                  }}
                  options={{
                    cMapUrl: 'https://unpkg.com/pdfjs-dist@4.8.69/cmaps/',
                    cMapPacked: true,
                    standardFontDataUrl: 'https://unpkg.com/pdfjs-dist@4.8.69/standard_fonts/'
                  }}
                >
                  {numPages && numPages > 0 && (
                    <Page
                      key={`page_${currentPage}`}
                      pageNumber={currentPage}
                      scale={scale}
                      rotate={rotation}
                      renderTextLayer={true}
                      renderAnnotationLayer={true}
                      className="shadow-xl bg-white"
                      onLoadError={(error) => {
                        console.error(`Error loading page ${currentPage}:`, error);
                      }}
                      onRenderError={(error) => {
                        console.error(`Error rendering page ${currentPage}:`, error);
                      }}
                    />
                  )}
                </Document>
                
                {/* Drawing canvas overlay */}
                {activeTool === 'pen' && (
                  <canvas
                    ref={canvasRef}
                    className="absolute top-0 left-0 w-full h-full z-10"
                    style={{ cursor: 'crosshair' }}
                    onMouseDown={startDrawing}
                    onMouseMove={draw}
                    onMouseUp={stopDrawing}
                    onMouseOut={stopDrawing}
                  />
                )}

                {/* Render existing notes for the current page */}
                {notes
                  .filter(note => note.page === currentPage)
                  .map(note => (
                    <div
                      key={note.id}
                      id={note.id}
                      className="absolute z-10 w-48 rounded-md shadow-lg"
                      style={{ 
                        top: `${note.position.y}px`, 
                        left: `${note.position.x}px`,
                        backgroundColor: `${note.color}20`,
                        border: `2px solid ${note.color}`
                      }}
                    >
                      <div 
                        className="p-2 text-sm text-white cursor-pointer flex justify-between items-start"
                        onClick={(e) => {
                          e.stopPropagation();
                          editNote(note.id);
                        }}
                      >
                        <div className="flex-1 overflow-hidden">
                          <div className="font-medium mb-1 truncate">Note</div>
                          <div className="text-white/80 text-xs whitespace-pre-wrap max-h-24 overflow-y-auto">
                            {note.content}
                          </div>
                        </div>
                        <button
                          className="ml-2 p-1 rounded-full hover:bg-white/20 text-white/70 hover:text-white"
                          onClick={(e) => {
                            e.stopPropagation();
                            deleteNote(note.id);
                          }}
                        >
                          &times;
                        </button>
                      </div>
                    </div>
                  ))}

                {/* Note editor */}
                {showNoteEditor && (
                  <div
                    ref={noteEditorRef}
                    className="absolute z-20 w-64 bg-gray-800/90 backdrop-blur-md rounded-md shadow-xl border border-white/20"
                    style={{ 
                      top: `${notePosition.y}px`, 
                      left: `${notePosition.x}px`,
                    }}
                    onClick={(e) => e.stopPropagation()}
                  >
                    <div className="p-2 border-b border-white/20 flex items-center justify-between">
                      <div className="text-white font-medium">
                        {activeNote ? 'Edit Note' : 'New Note'}
                      </div>
                      <div className="flex space-x-1">
                        <button 
                          className="w-5 h-5 rounded-full bg-green-500 hover:ring-2 ring-white"
                          onClick={() => setNoteColor('#4caf50')}
                          style={{ border: noteColor === '#4caf50' ? '2px solid white' : 'none' }}
                        />
                        <button 
                          className="w-5 h-5 rounded-full bg-blue-500 hover:ring-2 ring-white"
                          onClick={() => setNoteColor('#2196f3')}
                          style={{ border: noteColor === '#2196f3' ? '2px solid white' : 'none' }}
                        />
                        <button 
                          className="w-5 h-5 rounded-full bg-purple-500 hover:ring-2 ring-white"
                          onClick={() => setNoteColor('#9c27b0')}
                          style={{ border: noteColor === '#9c27b0' ? '2px solid white' : 'none' }}
                        />
                        <button 
                          className="w-5 h-5 rounded-full bg-yellow-500 hover:ring-2 ring-white"
                          onClick={() => setNoteColor('#ffc107')}
                          style={{ border: noteColor === '#ffc107' ? '2px solid white' : 'none' }}
                        />
                      </div>
                    </div>
                    <div className="p-2">
                      <textarea
                        className="w-full h-24 bg-black/30 border border-white/20 rounded-md p-2 text-white text-sm focus:outline-none focus:ring-1 focus:ring-purple-400 resize-none"
                        placeholder="Type your note here..."
                        value={noteText}
                        onChange={(e) => setNoteText(e.target.value)}
                        autoFocus
                      />
                      <div className="flex justify-end space-x-2 mt-2">
                        <button
                          className="px-3 py-1 text-xs bg-white/10 hover:bg-white/20 text-white rounded-md"
                          onClick={() => setShowNoteEditor(false)}
                        >
                          Cancel
                        </button>
                        <button
                          className="px-3 py-1 text-xs bg-purple-600 hover:bg-purple-700 text-white rounded-md"
                          onClick={activeNote ? updateNote : saveNote}
                        >
                          {activeNote ? 'Update' : 'Save'}
                        </button>
                      </div>
                    </div>
                  </div>
                )}

                {/* Eraser cursor */}
                {showEraserCursor && (
                  <div
                    className="absolute rounded-full border-2 border-white/70 bg-red-500/30 pointer-events-none z-30"
                    style={{
                      width: '20px',
                      height: '20px',
                      transform: 'translate(-50%, -50%)',
                      top: `${eraserPosition.y}px`,
                      left: `${eraserPosition.x}px`
                    }}
                  />
                )}
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center text-white/70">
                <File className="w-16 h-16 mb-4 opacity-50" />
                <p className="text-xl mb-2">No PDF loaded</p>
                <Button variant="outline" size="sm" onClick={triggerFileUpload}>
                  Select a PDF
                </Button>
              </div>
            )}
            
            {/* Text selection popup */}
            {showTextSelector && selectedText && (
              <div 
                ref={textSelectorRef}
                className="absolute z-20 bg-white/10 backdrop-blur-lg border border-white/20 rounded-lg shadow-lg p-1 flex space-x-1"
                style={{ 
                  top: `${textPosition.y - 50}px`, 
                  left: `${textPosition.x - 40}px`,
                }}
              >
                <button 
                  className="p-1 rounded-full bg-yellow-400/80 hover:bg-yellow-400 text-black"
                  onClick={() => addHighlight('#ffeb3b')}
                >
                  <Highlighter className="w-4 h-4" />
                </button>
                <button 
                  className="p-1 rounded-full bg-green-400/80 hover:bg-green-400 text-black"
                  onClick={() => addHighlight('#4caf50')}
                >
                  <Highlighter className="w-4 h-4" />
                </button>
                <button 
                  className="p-1 rounded-full bg-red-400/80 hover:bg-red-400 text-black"
                  onClick={() => addHighlight('#f44336')}
                >
                  <Highlighter className="w-4 h-4" />
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PDFViewer;